<?php
  session_start(); // Start the session to store messages

  // Include the configuration file
  require_once __DIR__ . '/../config.php';

  // This file is generated by Composer and loads all necessary PHPMailer classes
  require_once __DIR__ . '/../vendor/autoload.php';

  use PHPMailer\PHPMailer\PHPMailer;
  use PHPMailer\PHPMailer\Exception;

  // --- Helper function for redirection ---
  function redirectToForm($messageType, $message, $anchor = 'model-submission') {
    $_SESSION[$messageType] = $message;
    header('Location: ../index.php#' . $anchor);
    exit;
  }

  // Ensure the logs directory exists or create with permissions, testing 0777, adjust for production 0700
  if (!file_exists(dirname(EMAIL_ERROR_LOG_FILE))) {
    mkdir(dirname(EMAIL_ERROR_LOG_FILE), 0700, true);
  }

  if (!file_exists(UPLOAD_TEMP_DIR)) {
    // For production, consider 0700 or 0755 and ensure web server user ownership
    if (!mkdir(UPLOAD_TEMP_DIR, 0700, true)) {
        error_log(date('[Y-m-d H:i:s]') . " Failed to create UPLOAD_TEMP_DIR: " . UPLOAD_TEMP_DIR . "\n", 3, EMAIL_ERROR_LOG_FILE);
        redirectToForm('error_message', 'Could not send model. Please try again later.');
    } else {
        error_log(date('[Y-m-d H:i:s]') . " Created UPLOAD_TEMP_DIR: " . UPLOAD_TEMP_DIR . "\n", 3, EMAIL_ERROR_LOG_FILE);
    }
  }

  // Check if the form was submitted via POST and basic sanitization and retrieve form data
  if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $name = htmlspecialchars(trim($_POST['name']));
    $email = htmlspecialchars(trim($_POST['email']));
    $height = htmlspecialchars(trim($_POST['height']));
    $cellphone = htmlspecialchars(trim($_POST['cellphone'] ?? '')); // Use null coalescing operator for safety
    if (empty($cellphone)) $cellphone = 'No cellphone submitted';

    // Basic validation
    if (empty($name) || empty($email) || empty($height) || empty($cellphone)) {
      redirectToForm('error_message', 'Photo, Name, email, and height are required. Please fill out the form completely.');
    }

    // Validate email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
      redirectToForm('error_message', 'Invalid email format. Please enter a valid email address.');
    }

    // --- Image Attachment Handling ---
    $uploadedFilePath = null;
    $attachmentMessage = '';
    $file = null; // Initialize $file to avoid undefined variable warning if no file is uploaded

    if (isset($_FILES['image_attachment'])) {
      $file = $_FILES['image_attachment'];

      if ($file['error'] === UPLOAD_ERR_OK) {
        error_log(date('[Y-m-d H:i:s]') . " File upload detected. Name: {$file['name']}, Type: {$file['type']}, Size: {$file['size']} bytes.\n", 3, EMAIL_ERROR_LOG_FILE);

        if (!in_array($file['type'], ALLOWED_IMAGE_TYPES)) {
          error_log(date('[Y-m-d H:i:s]') . " File upload error: Invalid file type ({$file['type']})." . "\n", 3, EMAIL_ERROR_LOG_FILE);
          redirectToForm('error_message', 'Invalid file type. Only JPG, PNG, and GIF images are allowed.');
        }

        if ($file['size'] > MAX_UPLOAD_FILE_SIZE) {
          error_log(date('[Y-m-d H:i:s]') . " File upload error: File size ({$file['size']} bytes) too large." . "\n", 3, EMAIL_ERROR_LOG_FILE);
          redirectToForm('error_message', 'File size exceeds the maximum limit of ' . (MAX_UPLOAD_FILE_SIZE / (1024 * 1024)) . 'MB.');
        }

        // Verify image integrity (more robust for production)
        if (!getimagesize($file['tmp_name'])) {
          error_log(date('[Y-m-d H:i:s]') . " File upload error: Not a valid image file." . "\n", 3, EMAIL_ERROR_LOG_FILE);
          redirectToForm('error_message', 'The uploaded file is not a valid image.');
        }

        // Generate a unique file name to prevent conflicts
        $fileName = uniqid() . '_' . basename($file['name']);
        $uploadedFilePath = UPLOAD_TEMP_DIR . $fileName;

        if (move_uploaded_file($file['tmp_name'], $uploadedFilePath)) {
          error_log(date('[Y-m-d H:i:s]') . " File successfully moved to: {$uploadedFilePath}\n", 3, EMAIL_ERROR_LOG_FILE);
          $attachmentMessage = '<p><strong>Attachment:</strong> ' . htmlspecialchars($file['name']) . '</p>';
        } else {
          error_log(date('[Y-m-d H:i:s]') . " File upload error: Failed to move uploaded file from {$file['tmp_name']} to {$uploadedFilePath}." . "\n", 3, EMAIL_ERROR_LOG_FILE);
          redirectToForm('error_message', 'Failed to move uploaded file. Please try again.');
        }
      } elseif ($file['error'] !== UPLOAD_ERR_NO_FILE) {
        $phpFileUploadErrors = [
          UPLOAD_ERR_INI_SIZE   => 'The uploaded file exceeds the upload_max_filesize directive in php.ini.',
          UPLOAD_ERR_FORM_SIZE  => 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.',
          UPLOAD_ERR_PARTIAL    => 'The uploaded file was only partially uploaded.',
          UPLOAD_ERR_NO_TMP_DIR => 'Missing a temporary folder.',
          UPLOAD_ERR_CANT_WRITE => 'Failed to write file to disk.',
          UPLOAD_ERR_EXTENSION  => 'A PHP extension stopped the file upload.',
        ];
        $errorMessage = $phpFileUploadErrors[$file['error']] ?? 'Unknown upload error.';
        error_log(date('[Y-m-d H:i:s]') . " File upload error: {$errorMessage}. Error Code: {$file['error']}." . "\n", 3, EMAIL_ERROR_LOG_FILE);
        redirectToForm('error_message', 'File upload error: ' . $errorMessage);
      }
    }

    // Create a new PHPMailer instance
    $mail = new PHPMailer(true); // Passing `true` enables exceptions

    try {
      $mail->isSMTP();                            // Set mailer to use SMTP
      $mail->Host       = SMTP_HOST;              // Specify main and backup SMTP servers
      $mail->SMTPAuth   = true;                   // Enable SMTP authentication
      $mail->Username   = SMTP_USERNAME;          // SMTP username
      $mail->Password   = SMTP_PASSWORD;          // SMTP password
      $mail->SMTPSecure = SMTP_ENCRYPTION;        // Enable TLS encryption, `ssl` also accepted
      $mail->Port       = SMTP_PORT;              // TCP port to connect to
      // --- PHPMailer Debugging Settings ---
      $mail->SMTPDebug = 0;           // SMTP::DEBUG_OFF;
      // $mail->Debugoutput = 'html'; // No need for debug output if debugging is off

      // Recipients
      $mail->setFrom(SENDER_EMAIL, SENDER_NAME);        // Sender's email and name
      $mail->addAddress(RECEIVER_EMAIL, RECEIVER_NAME); // Add a recipient (our own contact email)
      $mail->addReplyTo($email, $name);                 // Add a reply-to address from the form

      // Attach the uploaded file if it exists and is a valid path
      if ($uploadedFilePath && file_exists($uploadedFilePath)) {
        error_log(date('[Y-m-d H:i:s]') . " Attempting to attach file: {$uploadedFilePath} with name " . basename($file['name']) . "\n", 3, EMAIL_ERROR_LOG_FILE);
        $mail->addAttachment($uploadedFilePath, basename($file['name'])); // Attach file with original name
        error_log(date('[Y-m-d H:i:s]') . " File attachment command issued to PHPMailer.\n", 3, EMAIL_ERROR_LOG_FILE);
      } else {
        error_log(date('[Y-m-d H:i:s]') . " No file to attach or file not found at: {$uploadedFilePath}\n", 3, EMAIL_ERROR_LOG_FILE);
      }

      // Content
      $mail->isHTML(true);
      $mail->Subject = "Model Aspiration";
      $mail->Body    = "
        <p><strong>Name:</strong> {$name}</p>
        <p><strong>Email:</strong> {$email}</p>
        <p><strong>Height:</strong> {$height}</p>
        <p><strong>Cellphone:</strong> {$cellphone}</p>
        {$attachmentMessage}
      ";
      $mail->AltBody = "Name: {$name}\nEmail: {$email}\nHeight: {$height}\nCellphone: {$cellphone}\n" . strip_tags($attachmentMessage); // Plain text for non-HTML mail clients

      $mail->send();
      error_log(date('[Y-m-d H:i:s]') . " Email sent successfully from {$email} to " . RECEIVER_EMAIL . ". Attachment: " . ($uploadedFilePath ? basename($fileName) : 'None') . "\n", 3, EMAIL_ERROR_LOG_FILE);
      redirectToForm('success_message', 'Message has been sent!');

    } catch (Exception $e) {
      error_log(date('[Y-m-d H:i:s]') . " Message could not be sent. Mailer Error: {$mail->ErrorInfo}. Exception: {$e->getMessage()}. IP: " . $_SERVER['REMOTE_ADDR'] . "\n", 3, EMAIL_ERROR_LOG_FILE);
      redirectToForm('error_message', "Message could not be sent. Please try again later. Mailer Error: " . $mail->ErrorInfo);
    } finally {
      // IMPORTANT: Clean up the uploaded file from the temporary directory
      if ($uploadedFilePath && file_exists($uploadedFilePath)) {
        unlink($uploadedFilePath); // Delete the temporary file
        error_log(date('[Y-m-d H:i:s]') . " Cleaned up temporary file: {$uploadedFilePath}\n", 3, EMAIL_ERROR_LOG_FILE);
      }
    }

    // // Redirect back to the form page
    // header('Location: ../index.php#model-submission');
    // exit;
  } else {
    // If accessed directly without POST request, redirect to the form
    redirectToForm('error_message', 'Access denied. Please submit the form.');
  }
?>
